swagger: "2.0"
info:
  description: "Confckurator Client/Server API"
  version: "1.0.0"
  title: "Confckurator"
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  contact:
    name: Steffen Ohrendorf
    url: https://github.com/stohrendorf/confckurator
basePath: "/api"
tags:
- name: "packs"
  description: "Everything about Packs"
- name: "templates"
  description: "Everything about Templates"
- name: "environments"
  description: "Everything about Environments"
paths:
  /template/:
    get:
      tags:
      - "templates"
      summary: "List all templates"
      description: ""
      operationId: "getTemplates"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Template"
    put:
      tags:
      - "templates"
      summary: "Create a new template"
      operationId: "createTemplate"
      consumes:
        - application/json
      parameters:
        - in: body
          name: postTemplatesBody
          description: Template creation properties.
          schema:
            $ref: "#/definitions/NewTemplate"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IdResponse"
        409:
          description: "conflict"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /template/{templateId}:
    parameters:
      - in: path
        name: templateId
        required: true
        type: integer
        minimum: 0
        description: "The template ID."
    get:
      tags:
      - "templates"
      summary: "Get details about a template"
      description: ""
      operationId: "getTemplate"
      produces:
      - "application/json"
      parameters:
        - name: with_text
          in: query
          description: Also deliver the template text when set to "true"; defaults to "false".
          type: boolean

      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Template"
    patch:
      tags:
      - "templates"
      summary: "Update a template and its variables"
      operationId: "updateTemplate"
      consumes:
        - application/json
      parameters:
        - in: body
          name: updateTemplateBody
          description: Template update properties.
          schema:
            $ref: "#/definitions/UpdateTemplate"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IdResponse"
    delete:
      tags:
      - "templates"
      summary: "Delete a template"
      description: ""
      operationId: "deleteTemplate"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: "conflict"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /template/{templateId}/variable/:
    parameters:
      - in: path
        name: templateId
        required: true
        type: integer
        minimum: 0
        description: "The template ID."
    get:
      tags:
      - "templates"
      summary: "List all variables of a template"
      description: ""
      operationId: "getTemplateVariables"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Variable"
  /pack/:
    get:
      tags:
      - "packs"
      summary: "List all packs"
      description: ""
      operationId: "getPacks"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Pack"
    put:
      tags:
      - "packs"
      summary: "Create a new pack"
      operationId: "createPack"
      consumes:
        - application/json
      parameters:
        - in: body
          name: postPacksBody
          description: Pack creation properties.
          schema:
            $ref: "#/definitions/NewPack"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IdResponse"
  /pack/{packId}:
    parameters:
      - in: path
        name: packId
        required: true
        type: integer
        minimum: 0
        description: "The pack ID."
    get:
      tags:
      - "packs"
      summary: "Get details about a pack"
      description: ""
      operationId: "getPack"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pack"
    delete:
      tags:
      - "packs"
      summary: "Delete a pack"
      description: ""
      operationId: "deletePack"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
  /pack/{packId}/variable/{variableId}:
    parameters:
      - in: path
        name: packId
        required: true
        type: integer
        minimum: 0
        description: "The pack ID."
      - in: path
        name: variableId
        required: true
        type: integer
        minimum: 0
        description: "The variable ID."
    patch:
      tags:
      - "packs"
      summary: "Set a variable's value"
      operationId: "setPackValue"
      consumes:
        - application/json
      parameters:
        - in: body
          name: setVariableValue
          description: Variable value.
          schema:
            $ref: "#/definitions/VariableValueUpdate"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
    delete:
      tags:
      - "packs"
      summary: "Delete a variable's value"
      operationId: "deletePackValue"
      consumes:
        - application/json
      parameters:
        - in: body
          name: setVariableValue
          description: Variable value.
          schema:
            $ref: "#/definitions/DeleteVariableValue"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
  /pack/{packId}/template/{templateId}:
    parameters:
      - in: path
        name: packId
        required: true
        type: integer
        minimum: 0
        description: "The pack ID."
      - in: path
        name: templateId
        required: true
        type: integer
        minimum: 0
        description: "The template ID."
    post:
      tags:
      - "packs"
      summary: "Attach a template to a pack"
      operationId: "attachPackTemplate"
      consumes:
        - application/json
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
    delete:
      tags:
      - "packs"
      summary: "Remove a template from a pack"
      operationId: "detachPackTemplate"
      consumes:
        - application/json
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
  /environment/:
    get:
      tags:
      - "environments"
      summary: "List all environments"
      description: ""
      operationId: "getEnvironments"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Environment"
    put:
      tags:
      - "environments"
      summary: "Create a new environment"
      operationId: "createEnvironment"
      consumes:
        - application/json
      parameters:
        - in: body
          name: postEnvironmentsBody
          description: Environment creation properties.
          schema:
            $ref: "#/definitions/NewEnvironment"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IdResponse"
  /environment/{environmentId}:
    parameters:
      - in: path
        name: environmentId
        required: true
        type: integer
        minimum: 0
        description: "The environment ID."
    get:
      tags:
      - "environments"
      summary: "Get details about an environment"
      description: ""
      operationId: "getEnvironment"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Environment"
    patch:
      tags:
      - "environments"
      summary: "Set an environment's name"
      operationId: "updateEnvironment"
      consumes:
        - application/json
      parameters:
        - in: body
          name: updateEnvironmentsBody
          description: Environment update properties.
          schema:
            $ref: "#/definitions/UpdateEnvironment"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
    delete:
      tags:
      - "environments"
      summary: "Delete an environment"
      description: ""
      operationId: "deleteEnvironment"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
  /instance/{packId}/{environmentId}:
    parameters:
      - in: path
        name: packId
        required: true
        type: integer
        minimum: 0
        description: "The pack ID."
      - in: path
        name: environmentId
        required: true
        type: integer
        minimum: 0
        description: "The environment ID."
    get:
      tags:
      - "packs"
      summary: "Get an instantiated pack"
      description: ""
      operationId: "getPackInstance"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/TemplateInstance"
definitions:
  IdResponse:
    type: "object"
    required:
      - id
    properties:
      id:
        type: "integer"
        description: An entity ID, the referenced entity type depends on the request context.
  Pack:
    type: "object"
    required:
      - id
      - name
      - values
    properties:
      id:
        type: "integer"
        format: "integer"
      name:
        type: "string"
        minLength: 1
        maxLength: 255
      values:
        type: "array"
        items:
          $ref: "#/definitions/Value"
  NewPack:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: Unique name of the pack.
        minLength: 1
        maxLength: 255
        pattern: "[^/]+"
  NewTemplate:
    type: object
    required:
      - name
      - text
    properties:
      name:
        type: string
        description: Unique name of the template.
        minLength: 1
        maxLength: 255
      text:
        type: string
        description: Template text.
  UpdateTemplate:
    type: object
    properties:
      name:
        type: string
        minLength: 1
        maxLength: 255
        pattern: "[^/]+"
      text:
        type: string
        description: Template text.
      variables:
        type: object
        properties:
          delete:
            type: array
            description: Variable IDs that should be removed from the template.
            items:
              type: integer
          update:
            type: array
            description: Variables to update.
            items:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                name:
                  type: string
                  description: Unique name of the variable.
                  minLength: 1
                  maxLength: 255
                  pattern: "^[a-zA-Z_][a-zA-Z0-9_]*$"
                description:
                  type: string
          create:
            type: array
            description: Variables to create.
            items:
              type: object
              required:
                - name
                - description
              properties:
                name:
                  type: string
                  description: Unique name of the variable.
                  minLength: 1
                  maxLength: 255
                  pattern: "^[a-zA-Z_][a-zA-Z0-9_]*$"
                description:
                  type: string
                  description: Variable description (e.g. constraints).
  NewEnvironment:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: Unique name of the environment.
        minLength: 1
        maxLength: 255
        pattern: "[^/]+"
  UpdateEnvironment:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: Unique name of the environment.
        minLength: 1
        maxLength: 255
        pattern: "[^/]+"
  Template:
    type: "object"
    required:
      - id
      - name
      - variables
    properties:
      id:
        type: "integer"
        format: "integer"
      name:
        type: "string"
        minLength: 1
        maxLength: 255
      variables:
        type: "array"
        items:
          $ref: "#/definitions/Variable"
      text:
        type: string
  Environment:
    type: "object"
    required:
      - id
      - name
      - in_use
    properties:
      id:
        type: "integer"
        format: "integer"
      name:
        type: "string"
        minLength: 1
        maxLength: 255
      in_use:
        type: "boolean"
        description: Wheter or not this environment is in use.
  Variable:
    type: "object"
    required:
      - id
      - name
      - description
      - in_use
    properties:
      id:
        type: "integer"
        description: Variable ID
      name:
        type: "string"
        minLength: 1
        maxLength: 255
        description: Unique (within its template) variable name.
        pattern: "^[a-zA-Z_][a-zA-Z0-9_]*$"
      description:
        type: "string"
        description: Description of this variable (i.e. constraints).
      in_use:
        type: "boolean"
        description: Wheter or not this variable is in use.
  Value:
    type: "object"
    required:
      - variable_id
      - environment_id
      - pack_id
    properties:
      variable_id:
        type: "integer"
        description: "Variable ID"
      environment_id:
        type: "integer"
        description: "Environment ID"
      pack_id:
        type: "integer"
        description: "Pack ID"
      data:
        type: "string"
        description: "Value data"
  VariableValueUpdate:
    type: "object"
    required:
      - data
    properties:
      environment_id:
        type: "integer"
        description: "Optional environment ID"
      data:
        type: "string"
        description: "The variable's value"
  DeleteVariableValue:
    type: "object"
    properties:
      environment:
        type: "integer"
        description: "Optional environment ID"
  ErrorResponse:
    type: object
    required:
      - message
    properties:
      message:
        type: string
  TemplateInstance:
    type: object
    required:
      - name
      - text
    properties:
      name:
        type: string
        description: Name of the instantiated template.
      text:
        type: string
        description: Template text.
